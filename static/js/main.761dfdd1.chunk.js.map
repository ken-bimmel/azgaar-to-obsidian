{"version":3,"sources":["InputAccordian.jsx","constants.js","templates.js","tagging.js","cleanData.js","buildFullObjects.js","errors.js","process.js","App.jsx","directions.js","index.js"],"names":["Accordion","withStyles","root","margin","expanded","MuiAccordion","InputAccordian","props","title","changeCallback","directions","useState","value","setValue","AccordionSummary","expandIcon","Grid","container","direction","justifyContent","item","AccordionDetails","Input","onChange","event","files","target","length","reader","FileReader","onload","text","result","readAsText","type","inputProps","accept","STATE_FIELD","PROVINCE_FIELD","BURG_FIELD","RELIGION_FIELD","CULTURE_FIELD","RIVER_FIELD","makeGenerationConfig","template","filepathGenerator","StateGenerationConfig","object","ProvinceGenerationConfig","BurgGenerationConfig","ReligionGenerationConfig","CultureGenerationConfig","RiverGenerationConfig","makeValidTag","replaceAll","makeTagFieldName","field","makeTagFields","fields","tagFields","filledToYesNo","cleanAreaElement","element","area","totalPop","ruralPop","urbanPop","fullName","cleanStateElements","areas","map","cleanProvinceElements","cleanBurgElement","capital","citadel","plaza","port","shantyTown","temple","walls","elevation","cleanBurgElements","burgs","cleanMilitaryElement","landTotal","parseInt","navalTotal","cleanDiplomacyElement","relationships","Object","keys","key","push","RelatedState","Relationship","cleanReligionElements","religions","cleanCultureElements","cultures","emblem","cleanRiverElements","rivers","cleanAndMap","list","cleaningFunc","idKey","reduce","cleanedElement","buildFullStates","states","mappedProvinces","mappedBurgs","mappedMilitary","mappedDiplomacy","military","diplomacy","provinces","buildFullProvinces","ParsingError","datasetName","errorMessage","messageString","params","overwrittenParams","Error","captureStackTrace","name","parseField","a","Papa","parse","header","skipEmptyLines","parsedField","errors","message","data","makeFiles","objectList","configObject","md","Mustache","render","File","buildVault","statesParsed","provincesParsed","diplomacyParsed","culturesParsed","religionsParsed","burgsParsed","riversParsed","militaryParsed","fullStates","fullProvinces","burgsCleaned","religionsCleaned","culturesCleaned","riversCleaned","App","theme","createTheme","palette","setStates","setProvinces","setDiplomacy","setCultures","setReligions","setBurgs","setRivers","setMilitary","buildingVault","setBuildingVault","buildError","setBuildError","fileBlob","setFileBlob","clearError","downloadZip","blob","ThemeProvider","alignItems","spacing","style","padding","xs","Card","CardContent","href","CardActions","Button","color","variant","onClick","CircularProgress","URL","createObjectURL","download","CardHeader","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.761dfdd1.chunk.js","sourcesContent":["import { React, useState } from 'react';\nimport {\n    Accordion as MuiAccordion,\n    AccordionDetails,\n    AccordionSummary,\n    Grid,\n    Input\n} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst Accordion = withStyles({\n    root: {\n        '&$expanded': {\n            margin: 'auto',\n        },\n    },\n    expanded: {},\n})(MuiAccordion);\n\nfunction InputAccordian(props) {\n    const { title, changeCallback, directions } = props;\n    const [value, setValue] = useState(null);\n\n    function handleChange(event) {\n        const files = event.target.files;\n        if (files.length === 0) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = function (event) {\n            const text = event.target.result;\n            changeCallback(text);\n            setValue(text);\n        }\n        reader.readAsText(files[0]);\n\n    }\n\n    return (\n        <Accordion>\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n            >\n                <Grid container direction=\"row\" justifyContent=\"space-between\">\n                    <Grid item>\n                        {value ? \"☑️ \" : null}{title}\n                    </Grid>\n                    <Grid item>\n                        {value ? \"☑️ Complete\" : \"\"}\n                    </Grid>\n                </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Grid container direction=\"column\">\n                    <Grid item>\n                        <p> {directions} </p>\n                    </Grid>\n                    <Grid item>\n                        <Input\n                            onChange={handleChange}\n                            type=\"file\"\n                            inputProps={{ accept: \".csv\" }}\n                        />\n                    </Grid>\n                </Grid>\n            </AccordionDetails>\n        </Accordion>\n    );\n}\n\nexport default InputAccordian;\n","const STATE_FIELD = \"State\";\nconst PROVINCE_FIELD = \"Province\";\nconst BURG_FIELD = \"Burg\";\nconst RELIGION_FIELD = \"Religion\";\nconst CULTURE_FIELD = \"Culture\";\nconst RIVER_FIELD = \"River\";\n// Yes, this is weird but correct\nconst DIPLOMACY_STATE_FIELD = \"\";\n\nconst DIETY_FIELD = \"Deity\";\nconst TYPE_FIELD = \"Type\";\nconst BASIN_TAG = \"Basin\";\n\nexport {\n    STATE_FIELD,\n    PROVINCE_FIELD,\n    BURG_FIELD,\n    RELIGION_FIELD,\n    CULTURE_FIELD,\n    RIVER_FIELD,\n    DIPLOMACY_STATE_FIELD,\n    DIETY_FIELD,\n    TYPE_FIELD,\n    BASIN_TAG,\n};","import {\n    STATE_FIELD,\n    PROVINCE_FIELD,\n    BURG_FIELD,\n    RELIGION_FIELD,\n    CULTURE_FIELD,\n    RIVER_FIELD\n} from \"./constants\";\n\n/*\n * Templates\n */\nconst StateTemplate =\n    `# {{{State}}}\n---\n| Attribute | Value |\n| --- | --- |\n| ID | {{Id}} |\n| State Full Name | {{{FullName}}} |\n| Form | [[{{Form}}]] |\n| Color | {{Color}} |\n| Capital | [[{{{Capital}}}]] |\n| Culture | [[{{{Culture}}}]] |\n| Type | [[{{Type}}]] |\n| Expansionism | {{Expansionism}} |\n| Cells | {{Cells}} |\n| Burgs | {{Burgs}} |\n| Area (mi^2) | {{Area}} |\n| Total Population | {{TotalPopulation}} |\n| Rural Population | {{RuralPopulation}} |\n| Urban Population | {{UrbanPopulation}} |\n\n---\n**Tags:** #State #{{{StateTag}}}\n\n---\n\n## Provinces\n\n---\n| Province | Area | Population |\n| --- | --- | --- |\n{{#provinces}}\n| [[{{{Province}}}]] | {{Area}} | {{TotalPopulation}} |\n{{/provinces}}\n\n---\n\n## Burgs\n\n---\n| Burg | Province | Population |\n| --- | --- | --- |\n{{#burgs}}\n| [[{{{Burg}}}]] | [[{{{Province}}}]] | {{Population}} |\n{{/burgs}}\n---\n\n{{#military}}\n## Military Forces\n\n---\n### Land Forces\n| Type | Number |\n| --- | --- |\n| Archers | {{military.Archers}} |\n| Artillery | {{military.Artillery}} |\n| Cavalry | {{military.Cavalry}} |\n| Foot Infantry | {{military.Infantry}} |\n| Total | {{military.LandTotal}} |\n\n### Naval Forces\n| Type | Number |\n| --- | --- |\n| Ships | {{military.Fleet}} |\n| Naval Personnel | {{military.NavalTotal}} |\n\n**Military Participation rate:** {{military.Rate}}\n\n---\n{{/military}}\n\n## Diplomacy\n\n---\n| State | Relationship |\n| --- | --- |\n{{#diplomacy}}\n| [[{{{RelatedState}}}]] | {{Relationship}} |\n{{/diplomacy}}\n`;\n\nconst ProvinceTemplate =\n    `# {{{Province}}}\n---\n| Attribute | Value |\n| --- | --- |\n| ID | {{Id}} |\n| Province Full Name | {{{FullName}}} |\n| Form | [[{{Form}}]] |\n| State | [[{{{State}}}]] |\n| Color | {{Color}} |\n| Capital | [[{{{Capital}}}]] |\n| Area (mi^2) | {{Area}} |\n| Total Population | {{TotalPopulation}} |\n| Rural Population | {{RuralPopulation}} |\n| Urban Population | {{UrbanPopulation}} |\n\n---\n**Tags:** #Province #{{{StateTag}}} #{{{ProvinceTag}}}\n\n---\n\n## Burgs\n\n---\n| Burg | Population |\n| --- | --- |\n{{#burgs}}\n| [[{{{Burg}}}]] | {{Population}} |\n{{/burgs}}\n\n---\n`;\n\nconst BurgTemplate =\n    `# {{{ Burg }}}\n---\n| Attribute | Value |\n| --- | --- |\n| ID | {{Id}} |\n| Province | [[{{{Province}}}]] |\n| State | [[{{{State}}}]] |\n| Culture | [[{{{Culture}}}]] |\n| Religion | [[{{{Religion}}}]] |\n| Population | {{Population}} |\n| Elevation (ft) | {{Elevation}} |\n| Latitude | {{Latitude}} |\n| Longitude | {{Longitude}} |\n\n---\n**Tags:** #Burg #{{{StateTag}}} #{{{ProvinceTag}}} #{{{BurgTag}}}\n\n---\n\n## Features\n\n| Feature | Present in Burg? |\n| --- | --- |\n| Capital | {{Capital}} |\n| Citadel | {{Citadel}} |\n| Plaza | {{Plaza}} |\n| Port | {{Port}} |\n| Shanty Town | {{ShantyTown}} |\n| Temple | {{Temple}} |\n| Walls | {{Walls}} |\n`;\n\nconst ReligionTemplate =\n    `# {{{Religion}}}\n---\n| Attribute | Value |\n| --- | --- |\n| ID | {{Id}} |\n| Deity | [[{{{Deity}}}]] |\n| Form | {{Form}} |\n| Type | {{Type}} |\n| Color | {{Color}} |\n| Number of believers | {{Believers}} |\n| Area under sway | {{Area}} |\n\n---\n**Tags:** #Religion #{{{ReligionTag}}} #{{{DeityTag}}}\n\n---`\n\nconst CultureTemplate =\n    `# {{{Culture}}}\n---\n| Attribute | Value |\n| --- | --- |\n| ID | {{Id}} |\n| Type | {{Type}} |\n| Namebase | {{{Namebase}}} |\n| Emblem | {{Emblem}} |\n| Color | {{Color}} |\n| Population | {{Population}} |\n| Area occupied | {{Area}} |\n| Expansionism | {{Expansionism}} |\n\n---\n**Tags:** #Culture #{{{CultureTag}}} #{{TypeTag}}\n\n---`\n\nconst RiverTemplate =\n    `# {{{River}}}\n---\n| Attribute | Value |\n| --- | --- |\n| ID | {{Id}} |\n| Basin | {{{Basin}}} |\n| Discharge | {{Discharge}} |\n| Length | {{Length}} |\n| Type | {{Type}} |\n| Width | {{Width}} |\n\n---\n**Tags:** #River #{{{RiverTag}}} #{{{BasinTag}}}\n\n---`\n\n/*\n * File names\n */\nfunction makeStateFileName(object) {\n    return `states/${object[STATE_FIELD]}/${object[STATE_FIELD]}.md`\n};\nfunction makeProvinceFileName(object) {\n    return `states/${object[STATE_FIELD]}/${object[PROVINCE_FIELD]}/${object[PROVINCE_FIELD]}.md`\n};\nfunction makeBurgFileName(object) {\n    return `states/${object[STATE_FIELD]}/${object[PROVINCE_FIELD]}/${object[BURG_FIELD]}.md`\n};\nfunction makeReligionFileName(object) {\n    return `religion/${object[RELIGION_FIELD]}/${object[RELIGION_FIELD]}.md`\n}\nfunction makeCultureFileName(object) {\n    return `culture/${object[CULTURE_FIELD]}/${object[CULTURE_FIELD]}.md`\n}\nfunction makeRiverFileName(object) {\n    return `geography/rivers/${object[RIVER_FIELD]}.md`\n}\n\n/*\n * Configs\n */\nfunction makeGenerationConfig(template, filepathGenerator) {\n    return {\n        template,\n        filepathGenerator\n    }\n};\n\nconst StateGenerationConfig = makeGenerationConfig(StateTemplate, makeStateFileName);\nconst ProvinceGenerationConfig = makeGenerationConfig(ProvinceTemplate, makeProvinceFileName);\nconst BurgGenerationConfig = makeGenerationConfig(BurgTemplate, makeBurgFileName);\nconst ReligionGenerationConfig = makeGenerationConfig(ReligionTemplate, makeReligionFileName);\nconst CultureGenerationConfig = makeGenerationConfig(CultureTemplate, makeCultureFileName);\nconst RiverGenerationConfig = makeGenerationConfig(RiverTemplate, makeRiverFileName);\n\n\nexport {\n    StateGenerationConfig,\n    ProvinceGenerationConfig,\n    BurgGenerationConfig,\n    ReligionGenerationConfig,\n    CultureGenerationConfig,\n    RiverGenerationConfig,\n}","function makeValidTag(value) {\n    if (value) {\n        const invalidCharacterRegex = /[^A-z0-9-/_]/ig\n        return value.replaceAll(invalidCharacterRegex, \"\");\n    }\n    return value\n}\n\nfunction makeTagFieldName(field) {\n    return `${field}Tag`;\n}\n\nfunction makeTagFields(object, fields) {\n    let tagFields = {};\n    for (let field of fields) {\n        tagFields[makeTagFieldName(field)] = makeValidTag(object[field])\n    }\n    return tagFields;\n}\n\nexport {\n    makeTagFields,\n}","// TODO: merge these with makeMap from buildNestedData?\n\nimport {\n    BASIN_TAG,\n    BURG_FIELD,\n    CULTURE_FIELD,\n    DIETY_FIELD,\n    DIPLOMACY_STATE_FIELD,\n    PROVINCE_FIELD,\n    RELIGION_FIELD,\n    RIVER_FIELD,\n    STATE_FIELD,\n    TYPE_FIELD\n} from \"./constants\";\nimport { makeTagFields } from \"./tagging\";\n\nfunction filledToYesNo(value) {\n    try {\n        return value.length > 0 ? \"Yes\" : \"No\"\n    } catch {\n        return \"No\";\n    }\n}\n\n\nfunction cleanAreaElement(element) {\n    const area = element[\"Area mi2\"] || element[\"Area km2\"];\n    const totalPop = element[\"Total Population\"];\n    const ruralPop = element[\"Rural Population\"];\n    const urbanPop = element[\"Urban Population\"];\n    const fullName = element[\"Full Name\"];\n    const tagFields = makeTagFields(element, [STATE_FIELD, PROVINCE_FIELD])\n    return {\n        ...element,\n        ...tagFields,\n        \"Area\": area,\n        \"TotalPopulation\": totalPop,\n        \"RuralPopulation\": ruralPop,\n        \"UrbanPopulation\": urbanPop,\n        \"FullName\": fullName,\n    };\n}\n\nfunction cleanStateElements(areas) {\n    if (areas) {\n        return areas.map((element) => cleanAreaElement(element))\n    }\n    return [];\n}\n\nfunction cleanProvinceElements(areas) {\n    return cleanStateElements(areas);\n}\n\nfunction cleanBurgElement(element) {\n    const capital = filledToYesNo(element[\"Capital\"]);\n    const citadel = filledToYesNo(element[\"Citadel\"]);\n    const plaza = filledToYesNo(element[\"Plaza\"]);\n    const port = filledToYesNo(element[\"Port\"]);\n    const shantyTown = filledToYesNo(element[\"Shanty Town\"]);\n    const temple = filledToYesNo(element[\"Temple\"]);\n    const walls = filledToYesNo(element[\"Walls\"]);\n\n    const elevation = element[\"Elevation (ft)\"] || element[\"Elevation (m)\"]\n\n    const tagFields = makeTagFields(element, [STATE_FIELD, PROVINCE_FIELD, BURG_FIELD])\n\n    return {\n        ...element,\n        ...tagFields,\n        \"Capital\": capital,\n        \"Citadel\": citadel,\n        \"Plaza\": plaza,\n        \"Port\": port,\n        \"ShantyTown\": shantyTown,\n        \"Temple\": temple,\n        \"Walls\": walls,\n        \"Elevation\": elevation,\n    };\n}\n\nfunction cleanBurgElements(burgs) {\n    return burgs.map((element) => cleanBurgElement(element))\n}\n\nfunction cleanMilitaryElement(element) {\n    const archersCount = parseInt(element[\"Archers\"]) || 0;\n    const artilleryCount = parseInt(element[\"Artillery\"]) || 0;\n    const cavalryCount = parseInt(element[\"Cavalry\"]) || 0;\n    const infantryCount = parseInt(element[\"Infantry\"]) || 0;\n    const totalInService = parseInt(element[\"Total\"]);\n    const landTotal = archersCount + artilleryCount + cavalryCount + infantryCount;\n    const navalTotal = totalInService - landTotal;\n\n    return {\n        ...element,\n        \"LandTotal\": landTotal,\n        \"NavalTotal\": navalTotal,\n    };\n}\n\nfunction cleanDiplomacyElement(element) {\n    let relationships = [];\n    for (let key of Object.keys(element)) {\n        if (key !== DIPLOMACY_STATE_FIELD && element[key] !== \"x\") {\n            relationships.push({ RelatedState: key, Relationship: element[key] });\n        }\n    }\n    return relationships;\n}\n\nfunction cleanReligionElements(religions) {\n    return religions.map((element) => {\n        const area = element[\"Area mi2\"] || element[\"Area km2\"];\n\n        const tagFields = makeTagFields(element, [RELIGION_FIELD, DIETY_FIELD])\n        return {\n            ...element,\n            ...tagFields,\n            \"Area\": area,\n        }\n    });\n}\n\nfunction cleanCultureElements(cultures) {\n    return cultures.map((element) => {\n        const area = element[\"Area mi2\"] || element[\"Area km2\"];\n        const emblem = element[\"Emblems Shape\"];\n\n        const tagFields = makeTagFields(element, [CULTURE_FIELD, TYPE_FIELD]);\n        return {\n            ...element,\n            ...tagFields,\n            \"Area\": area,\n            \"Emblem\": emblem,\n        }\n    });\n}\n\nfunction cleanRiverElements(rivers) {\n    return rivers.map((element) => {\n        const tagFields = makeTagFields(element, [RIVER_FIELD, BASIN_TAG]);\n        return {\n            ...element,\n            ...tagFields,\n        }\n    });\n}\n\n// Applies the cleaning function to each element and \n// turns it into a map keyed on idKey field\nfunction cleanAndMap(list, cleaningFunc, idKey) {\n    if (list.length === 0) {\n        return {};\n    };\n\n    const map = list.reduce((map, element) => {\n        const key = element[idKey];\n        const cleanedElement = cleaningFunc(element);\n        if (map[key]) {\n            map[key] = [...map[key], cleanedElement];\n        } else {\n            map[key] = [cleanedElement];\n        }\n        return map;\n    }, {})\n    return map;\n}\n\nexport {\n    cleanAreaElement,\n    cleanBurgElement,\n    cleanMilitaryElement,\n    cleanDiplomacyElement,\n    cleanStateElements,\n    cleanProvinceElements,\n    cleanBurgElements,\n    cleanReligionElements,\n    cleanCultureElements,\n    cleanRiverElements,\n    cleanAndMap,\n}","import {\n    PROVINCE_FIELD,\n    STATE_FIELD\n} from \"./constants\";\n\nfunction buildFullStates(states, mappedProvinces, mappedBurgs, mappedMilitary, mappedDiplomacy) {\n    return states.map((element) => {\n        const key = element[STATE_FIELD];\n        const military = mappedMilitary[key] && mappedMilitary[key].length > 0 ? mappedMilitary[key][0] : null;\n        const diplomacy = mappedDiplomacy[key] && mappedDiplomacy[key].length > 0 ? mappedDiplomacy[key][0] : null;\n        return {\n            ...element,\n            provinces: mappedProvinces[key],\n            burgs: mappedBurgs[key],\n            military,\n            diplomacy,\n        }\n    });\n}\n\nfunction buildFullProvinces(provinces, mappedBurgs) {\n    return provinces.map((element) => {\n        const key = element[PROVINCE_FIELD]\n        return {\n            ...element,\n            burgs: mappedBurgs[key],\n        }\n    });\n}\n\nexport {\n    buildFullStates,\n    buildFullProvinces,\n}","class ParsingError extends Error {\n    constructor(datasetName, errorMessage, ...params) {\n        const messageString = `Error parsing ${datasetName} dataset: ${errorMessage}`\n        const overwrittenParams = [messageString, ...params]\n        super(...overwrittenParams);\n\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ParsingError);\n        }\n\n        this.name = \"Parsing Error\";\n    }\n}\n\nexport {\n    ParsingError,\n}","import Papa from \"papaparse\";\nimport Mustache from \"mustache\";\nimport {\n    StateGenerationConfig,\n    ProvinceGenerationConfig,\n    BurgGenerationConfig,\n    ReligionGenerationConfig,\n    CultureGenerationConfig,\n    RiverGenerationConfig,\n} from \"./templates\";\nimport {\n    cleanAndMap,\n    cleanStateElements,\n    cleanAreaElement,\n    cleanBurgElement,\n    cleanMilitaryElement,\n    cleanDiplomacyElement,\n    cleanReligionElements,\n    cleanCultureElements,\n    cleanProvinceElements,\n    cleanBurgElements,\n    cleanRiverElements,\n} from \"./cleanData\";\nimport { buildFullProvinces, buildFullStates } from \"./buildFullObjects\";\nimport {\n    STATE_FIELD,\n    PROVINCE_FIELD,\n    DIPLOMACY_STATE_FIELD,\n} from \"./constants\";\nimport {\n    ParsingError\n} from \"./errors\";\n\nasync function parseField(field, name) {\n    try {\n        if (field === null) {\n            return [];\n        }\n        const parsedField = await Papa.parse(field, { header: true, skipEmptyLines: true });\n        if (parsedField.errors.length > 0) {\n            throw new Error(parsedField.errors[0].message)\n        }\n        return parsedField.data;\n    } catch (e) {\n        throw new ParsingError(name, e.message);\n    }\n}\n\nfunction makeFiles(objectList, configObject) {\n    const { template, filepathGenerator } = configObject;\n    return objectList.map((object => {\n        const md = Mustache.render(template, object);\n        return new File([md], filepathGenerator(object), { type: \"text/plain\" })\n    }))\n}\n\nexport async function buildVault(\n    states,\n    provinces = null,\n    diplomacy = null,\n    cultures = null,\n    religions = null,\n    burgs = null,\n    rivers = null,\n    military = null\n) {\n    const statesParsed = await parseField(states, \"States\");\n    const provincesParsed = await parseField(provinces, \"Provinces\");\n    const diplomacyParsed = await parseField(diplomacy, \"Diplomacy\");\n    const culturesParsed = await parseField(cultures, \"Cultures\");\n    const religionsParsed = await parseField(religions, \"Religions\");\n    const burgsParsed = await parseField(burgs, \"Burgs\");\n    const riversParsed = await parseField(rivers, \"Rivers\");\n    const militaryParsed = await parseField(military, \"Military\");\n\n    const fullStates = buildFullStates(\n        cleanStateElements(statesParsed),\n        cleanAndMap(provincesParsed, cleanAreaElement, STATE_FIELD),\n        cleanAndMap(burgsParsed, cleanBurgElement, STATE_FIELD),\n        cleanAndMap(militaryParsed, cleanMilitaryElement, STATE_FIELD),\n        cleanAndMap(diplomacyParsed, cleanDiplomacyElement, DIPLOMACY_STATE_FIELD)\n    );\n    const fullProvinces = buildFullProvinces(\n        cleanProvinceElements(provincesParsed),\n        cleanAndMap(burgsParsed, cleanBurgElement, PROVINCE_FIELD)\n    )\n\n    const burgsCleaned = cleanBurgElements(burgsParsed);\n    const religionsCleaned = cleanReligionElements(religionsParsed);\n    const culturesCleaned = cleanCultureElements(culturesParsed);\n    const riversCleaned = cleanRiverElements(riversParsed);\n\n    return [\n        ...makeFiles(fullStates, StateGenerationConfig),\n        ...makeFiles(fullProvinces, ProvinceGenerationConfig),\n        ...makeFiles(burgsCleaned, BurgGenerationConfig),\n        ...makeFiles(religionsCleaned, ReligionGenerationConfig),\n        ...makeFiles(culturesCleaned, CultureGenerationConfig),\n        ...makeFiles(riversCleaned, RiverGenerationConfig),\n    ];\n}\n","import { React, useState } from 'react';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  CircularProgress,\n  CardHeader\n} from '@material-ui/core';\nimport {\n  createTheme,\n  ThemeProvider\n} from '@material-ui/core/styles';\nimport { downloadZip } from \"client-zip\";\n\nimport InputAccordian from \"./InputAccordian\";\nimport {\n  StatesDirections,\n  ProvincesDirections,\n  BurgsDirections,\n  MilitaryDirections,\n  DiplomacyDirections,\n  ReligionsDirections,\n  CulturesDirections,\n  RiversDirections,\n} from \"./directions\";\nimport { buildVault } from \"./process\";\n\nfunction App() {\n  const theme = createTheme(\n    {\n      palette: {\n        type: 'dark'\n      }\n    }\n  )\n\n  const [states, setStates] = useState(null);\n  const [provinces, setProvinces] = useState(null);\n  const [diplomacy, setDiplomacy] = useState(null);\n  const [cultures, setCultures] = useState(null);\n  const [religions, setReligions] = useState(null);\n  const [burgs, setBurgs] = useState(null);\n  const [rivers, setRivers] = useState(null);\n  const [military, setMilitary] = useState(null);\n\n  const [buildingVault, setBuildingVault] = useState(false);\n  const [buildError, setBuildError] = useState(null);\n\n  const [fileBlob, setFileBlob] = useState(null);\n\n  function clearError() {\n    setBuildError(null);\n  }\n\n  async function makeObsidianVault() {\n    setBuildingVault(true);\n    try {\n      clearError();\n      const files = await buildVault(states, provinces, diplomacy, cultures, religions, burgs, rivers, military);\n      setFileBlob(await downloadZip(files).blob())\n    }\n    catch (error) {\n      setBuildError(error);\n    }\n    finally {\n      setBuildingVault(false);\n    }\n  }\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-around\"\n        alignItems=\"flex-start\"\n        spacing={2}\n        style={{ padding: \"16px\" }}\n      >\n        <Grid item xs={9}>\n          <InputAccordian title=\"States\" changeCallback={setStates} directions={StatesDirections} />\n          <InputAccordian title=\"Provinces\" changeCallback={setProvinces} directions={ProvincesDirections} />\n          <InputAccordian title=\"Burgs\" changeCallback={setBurgs} directions={BurgsDirections} />\n          <InputAccordian title=\"Military\" changeCallback={setMilitary} directions={MilitaryDirections} />\n          <InputAccordian title=\"Diplomacy\" changeCallback={setDiplomacy} directions={DiplomacyDirections} />\n          <InputAccordian title=\"Religions\" changeCallback={setReligions} directions={ReligionsDirections} />\n          <InputAccordian title=\"Cultures\" changeCallback={setCultures} directions={CulturesDirections} />\n          <InputAccordian title=\"Rivers\" changeCallback={setRivers} directions={RiversDirections} />\n        </Grid>\n        <Grid item xs={3}>\n          <Grid\n            container\n            direction=\"column\"\n            spacing={2}\n          >\n            <Grid item>\n              <Card>\n                <CardContent>\n                  <p>\n                    This tool provides a method for converting the exported CSVs from <a href=\"https://azgaar.github.io/Fantasy-Map-Generator/\"> Azgaar's Fantasy Map Generator</a> into a linked <a href=\"https://obsidian.md/\">Obsidian Vault</a> for whatever your purpose.\n                  </p>\n                  <p>\n                    See each of the accordians for details on where to find the file you need to upload to that section.\n                  </p>\n                  <p>\n                    Once you have loaded the files you want, click \"Make Obsidian Vault\". It may take some time to process depending on the size of your uploads. Once the files are generated, a new \"Download Vault\" button will appear. Click it to download the vault. Unzip the file in your Vault folder, or use the unzipped folder as the root of a new vault.\n                  </p>\n                  <p>\n                    This tool makes no claim of licesnse or ownership of anything passed through it. The tool does and cannot store any information you pass through it.\n                  </p>\n                  <p>\n                    If you would like to contribute to this tool, see the <a href=\"https://github.com/ken-bimmel/azgaar-to-obsidian\"> repository</a>  for details.\n                  </p>\n                </CardContent>\n                <CardActions>\n                  <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={makeObsidianVault}\n                  >\n                    Make Obsidian Vault\n                  </Button>\n                  {buildingVault ? <CircularProgress /> : null}\n                  {fileBlob ?\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      href={URL.createObjectURL(fileBlob)}\n                      download=\"vault.zip\"\n                    >\n                      Download Vault\n                    </Button>\n                    : null}\n                </CardActions>\n              </Card>\n            </Grid>\n            <Grid item>\n              {buildError ?\n                <Card style={{ \"background\": \"#840e0e\" }}>\n                  <CardHeader title={buildError.name} />\n                  <CardContent>\n                    {buildError.message}\n                  </CardContent>\n                  <CardActions>\n                    <Button onClick={clearError}>Clear Error</Button>\n                  </CardActions>\n                </Card>\n                : null}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const StatesDirections = `Tools > Click to configure > States > Save state-related data as text file (.csv)`;\nconst ProvincesDirections = `Tools > Click to configure > Provinces > Save provinces-related data as a text file (.csv) --\nRemember to make sure \"State\" is set to \"all\".`;\nconst BurgsDirections = `Tools > Click to overview > Burgs > Save burgs-related data as a text file (.csv) --\nRemember to make sure \"State\" is set to \"all\" and \"Culture\" is set to \"all\".`;\nconst MilitaryDirections = `Tools > Click to overview > Military > Save military-related data as a text file (.csv)`;\nconst DiplomacyDirections = `Tools > Click to configure > Diplomacy > Save state relations matrix as a text file (.csv)`;\nconst ReligionsDirections = `Tools > Click to configure > Religions > Download religions-related data`;\nconst CulturesDirections = `Tools > Click to configure > Cultures > Download cultures-related data`;\nconst RiversDirections = `Tools > Click to overview > Rivers > Ave rivers-related data as a text file (.csv)`;\n\nexport {\n    StatesDirections,\n    ProvincesDirections,\n    BurgsDirections,\n    MilitaryDirections,\n    DiplomacyDirections,\n    ReligionsDirections,\n    CulturesDirections,\n    RiversDirections,\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}